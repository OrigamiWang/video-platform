<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="szu.mapper.UserMapper">
  <resultMap id="BaseResultMap" type="szu.model.User">
    <id column="id" jdbcType="INTEGER" property="id" />
    <result column="name" jdbcType="VARCHAR" property="name" />
    <result column="gender" jdbcType="BIT" property="gender" />
    <result column="level" jdbcType="INTEGER" property="level" />
    <result column="exp" jdbcType="INTEGER" property="exp" />
    <result column="status" jdbcType="BIT" property="status" />
    <result column="role" jdbcType="BIT" property="role" />
    <result column="fan" jdbcType="INTEGER" property="fan" />
    <result column="follow" jdbcType="INTEGER" property="follow" />
    <result column="like" jdbcType="INTEGER" property="like" />
    <result column="ip" jdbcType="VARCHAR" property="ip" />
    <result column="phone" jdbcType="VARCHAR" property="phone" />
    <result column="password" jdbcType="VARCHAR" property="password" />
    <result column="info" jdbcType="VARCHAR" property="info" />
  </resultMap>
  <sql id="Example_Where_Clause">
    <where>
      <foreach collection="oredCriteria" item="criteria" separator="or">
        <if test="criteria.valid">
          <trim prefix="(" prefixOverrides="and" suffix=")">
            <foreach collection="criteria.criteria" item="criterion">
              <choose>
                <when test="criterion.noValue">
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue">
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue">
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue">
                  and ${criterion.condition}
                  <foreach close=")" collection="criterion.value" item="listItem" open="(" separator=",">
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Update_By_Example_Where_Clause">
    <where>
      <foreach collection="example.oredCriteria" item="criteria" separator="or">
        <if test="criteria.valid">
          <trim prefix="(" prefixOverrides="and" suffix=")">
            <foreach collection="criteria.criteria" item="criterion">
              <choose>
                <when test="criterion.noValue">
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue">
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue">
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue">
                  and ${criterion.condition}
                  <foreach close=")" collection="criterion.value" item="listItem" open="(" separator=",">
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Base_Column_List">
    id, name, gender, level, exp, status, role, fan, follow, like, ip, phone, password, 
    info
  </sql>
  <select id="selectByExample" parameterType="szu.model.UserExample" resultMap="BaseResultMap">
    select
    <if test="distinct">
      distinct
    </if>
    <include refid="Base_Column_List" />
    from user
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
    <if test="orderByClause != null">
      order by ${orderByClause}
    </if>
  </select>
  <select id="selectByPrimaryKey" parameterType="java.lang.Integer" resultMap="BaseResultMap">
    select 
    <include refid="Base_Column_List" />
    from user
    where id = #{id,jdbcType=INTEGER}
  </select>
  <delete id="deleteByPrimaryKey" parameterType="java.lang.Integer">
    delete from user
    where id = #{id,jdbcType=INTEGER}
  </delete>
  <delete id="deleteByExample" parameterType="szu.model.UserExample">
    delete from user
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
  </delete>
  <insert id="insert" parameterType="szu.model.User">
    <selectKey keyProperty="id" order="AFTER" resultType="java.lang.Integer">
      SELECT LAST_INSERT_ID()
    </selectKey>
    insert into user (name, gender, level, 
      exp, status, role, fan, 
      follow, like, ip, phone, 
      password, info)
    values (#{name,jdbcType=VARCHAR}, #{gender,jdbcType=BIT}, #{level,jdbcType=INTEGER}, 
      #{exp,jdbcType=INTEGER}, #{status,jdbcType=BIT}, #{role,jdbcType=BIT}, #{fan,jdbcType=INTEGER}, 
      #{follow,jdbcType=INTEGER}, #{like,jdbcType=INTEGER}, #{ip,jdbcType=VARCHAR}, #{phone,jdbcType=VARCHAR}, 
      #{password,jdbcType=VARCHAR}, #{info,jdbcType=VARCHAR})
  </insert>
  <insert id="insertSelective" parameterType="szu.model.User">
    <selectKey keyProperty="id" order="AFTER" resultType="java.lang.Integer">
      SELECT LAST_INSERT_ID()
    </selectKey>
    insert into user
    <trim prefix="(" suffix=")" suffixOverrides=",">
      <if test="name != null">
        name,
      </if>
      <if test="gender != null">
        gender,
      </if>
      <if test="level != null">
        level,
      </if>
      <if test="exp != null">
        exp,
      </if>
      <if test="status != null">
        status,
      </if>
      <if test="role != null">
        role,
      </if>
      <if test="fan != null">
        fan,
      </if>
      <if test="follow != null">
        follow,
      </if>
      <if test="like != null">
        like,
      </if>
      <if test="ip != null">
        ip,
      </if>
      <if test="phone != null">
        phone,
      </if>
      <if test="password != null">
        password,
      </if>
      <if test="info != null">
        info,
      </if>
    </trim>
    <trim prefix="values (" suffix=")" suffixOverrides=",">
      <if test="name != null">
        #{name,jdbcType=VARCHAR},
      </if>
      <if test="gender != null">
        #{gender,jdbcType=BIT},
      </if>
      <if test="level != null">
        #{level,jdbcType=INTEGER},
      </if>
      <if test="exp != null">
        #{exp,jdbcType=INTEGER},
      </if>
      <if test="status != null">
        #{status,jdbcType=BIT},
      </if>
      <if test="role != null">
        #{role,jdbcType=BIT},
      </if>
      <if test="fan != null">
        #{fan,jdbcType=INTEGER},
      </if>
      <if test="follow != null">
        #{follow,jdbcType=INTEGER},
      </if>
      <if test="like != null">
        #{like,jdbcType=INTEGER},
      </if>
      <if test="ip != null">
        #{ip,jdbcType=VARCHAR},
      </if>
      <if test="phone != null">
        #{phone,jdbcType=VARCHAR},
      </if>
      <if test="password != null">
        #{password,jdbcType=VARCHAR},
      </if>
      <if test="info != null">
        #{info,jdbcType=VARCHAR},
      </if>
    </trim>
  </insert>
  <select id="countByExample" parameterType="szu.model.UserExample" resultType="java.lang.Long">
    select count(*) from user
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
  </select>
  <update id="updateByExampleSelective" parameterType="map">
    update user
    <set>
      <if test="row.id != null">
        id = #{row.id,jdbcType=INTEGER},
      </if>
      <if test="row.name != null">
        name = #{row.name,jdbcType=VARCHAR},
      </if>
      <if test="row.gender != null">
        gender = #{row.gender,jdbcType=BIT},
      </if>
      <if test="row.level != null">
        level = #{row.level,jdbcType=INTEGER},
      </if>
      <if test="row.exp != null">
        exp = #{row.exp,jdbcType=INTEGER},
      </if>
      <if test="row.status != null">
        status = #{row.status,jdbcType=BIT},
      </if>
      <if test="row.role != null">
        role = #{row.role,jdbcType=BIT},
      </if>
      <if test="row.fan != null">
        fan = #{row.fan,jdbcType=INTEGER},
      </if>
      <if test="row.follow != null">
        follow = #{row.follow,jdbcType=INTEGER},
      </if>
      <if test="row.like != null">
        like = #{row.like,jdbcType=INTEGER},
      </if>
      <if test="row.ip != null">
        ip = #{row.ip,jdbcType=VARCHAR},
      </if>
      <if test="row.phone != null">
        phone = #{row.phone,jdbcType=VARCHAR},
      </if>
      <if test="row.password != null">
        password = #{row.password,jdbcType=VARCHAR},
      </if>
      <if test="row.info != null">
        info = #{row.info,jdbcType=VARCHAR},
      </if>
    </set>
    <if test="example != null">
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByExample" parameterType="map">
    update user
    set id = #{row.id,jdbcType=INTEGER},
      name = #{row.name,jdbcType=VARCHAR},
      gender = #{row.gender,jdbcType=BIT},
      level = #{row.level,jdbcType=INTEGER},
      exp = #{row.exp,jdbcType=INTEGER},
      status = #{row.status,jdbcType=BIT},
      role = #{row.role,jdbcType=BIT},
      fan = #{row.fan,jdbcType=INTEGER},
      follow = #{row.follow,jdbcType=INTEGER},
      like = #{row.like,jdbcType=INTEGER},
      ip = #{row.ip,jdbcType=VARCHAR},
      phone = #{row.phone,jdbcType=VARCHAR},
      password = #{row.password,jdbcType=VARCHAR},
      info = #{row.info,jdbcType=VARCHAR}
    <if test="example != null">
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByPrimaryKeySelective" parameterType="szu.model.User">
    update user
    <set>
      <if test="name != null">
        name = #{name,jdbcType=VARCHAR},
      </if>
      <if test="gender != null">
        gender = #{gender,jdbcType=BIT},
      </if>
      <if test="level != null">
        level = #{level,jdbcType=INTEGER},
      </if>
      <if test="exp != null">
        exp = #{exp,jdbcType=INTEGER},
      </if>
      <if test="status != null">
        status = #{status,jdbcType=BIT},
      </if>
      <if test="role != null">
        role = #{role,jdbcType=BIT},
      </if>
      <if test="fan != null">
        fan = #{fan,jdbcType=INTEGER},
      </if>
      <if test="follow != null">
        follow = #{follow,jdbcType=INTEGER},
      </if>
      <if test="like != null">
        like = #{like,jdbcType=INTEGER},
      </if>
      <if test="ip != null">
        ip = #{ip,jdbcType=VARCHAR},
      </if>
      <if test="phone != null">
        phone = #{phone,jdbcType=VARCHAR},
      </if>
      <if test="password != null">
        password = #{password,jdbcType=VARCHAR},
      </if>
      <if test="info != null">
        info = #{info,jdbcType=VARCHAR},
      </if>
    </set>
    where id = #{id,jdbcType=INTEGER}
  </update>
  <update id="updateByPrimaryKey" parameterType="szu.model.User">
    update user
    set name = #{name,jdbcType=VARCHAR},
      gender = #{gender,jdbcType=BIT},
      level = #{level,jdbcType=INTEGER},
      exp = #{exp,jdbcType=INTEGER},
      status = #{status,jdbcType=BIT},
      role = #{role,jdbcType=BIT},
      fan = #{fan,jdbcType=INTEGER},
      follow = #{follow,jdbcType=INTEGER},
      like = #{like,jdbcType=INTEGER},
      ip = #{ip,jdbcType=VARCHAR},
      phone = #{phone,jdbcType=VARCHAR},
      password = #{password,jdbcType=VARCHAR},
      info = #{info,jdbcType=VARCHAR}
    where id = #{id,jdbcType=INTEGER}
  </update>
</mapper>